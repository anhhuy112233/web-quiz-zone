/**
 * Component ExamList - Danh s√°ch ƒë·ªÅ thi cho gi√°o vi√™n
 * Hi·ªÉn th·ªã danh s√°ch ƒë·ªÅ thi d·∫°ng b·∫£ng v·ªõi c√°c thao t√°c CRUD
 */

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import Button from '../common/Button';
import Modal from '../common/Modal';

/**
 * ExamList component
 * @param {Array} exams - Danh s√°ch ƒë·ªÅ thi
 * @param {Function} onDelete - Callback khi x√≥a ƒë·ªÅ thi
 * @returns {JSX.Element} B·∫£ng danh s√°ch ƒë·ªÅ thi v·ªõi modal x√°c nh·∫≠n x√≥a
 */
const ExamList = ({ exams, onDelete }) => {
  // State qu·∫£n l√Ω modal x√≥a v√† ƒë·ªÅ thi c·∫ßn x√≥a
  const [deleteModalOpen, setDeleteModalOpen] = useState(false);
  const [examToDelete, setExamToDelete] = useState(null);

  /**
   * L·∫•y CSS class cho badge tr·∫°ng th√°i
   * @param {string} status - Tr·∫°ng th√°i ƒë·ªÅ thi
   * @returns {string} CSS classes
   */
  const getStatusBadgeClass = (status) => {
    switch (status) {
      case 'draft':
        return 'bg-gray-100 text-gray-800';      // X√°m - nh√°p
      case 'scheduled':
        return 'bg-blue-100 text-blue-800';      // Xanh d∆∞∆°ng - ƒë√£ l√™n l·ªãch
      case 'active':
        return 'bg-green-100 text-green-800';    // Xanh l√° - ƒëang di·ªÖn ra
      case 'completed':
        return 'bg-purple-100 text-purple-800';  // T√≠m - ƒë√£ k·∫øt th√∫c
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  /**
   * L·∫•y text hi·ªÉn th·ªã cho tr·∫°ng th√°i
   * @param {string} status - Tr·∫°ng th√°i ƒë·ªÅ thi
   * @returns {string} Text hi·ªÉn th·ªã
   */
  const getStatusText = (status) => {
    switch (status) {
      case 'draft':
        return 'Nh√°p';
      case 'scheduled':
        return 'ƒê√£ l√™n l·ªãch';
      case 'active':
        return 'ƒêang di·ªÖn ra';
      case 'completed':
        return 'ƒê√£ k·∫øt th√∫c';
      default:
        return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  /**
   * Format ng√†y th√°ng theo ƒë·ªãnh d·∫°ng Vi·ªát Nam, lu√¥n hi·ªÉn th·ªã gi·ªù local Vi·ªát Nam
   * @param {string|Date} date - Ng√†y c·∫ßn format
   * @returns {string} Ng√†y ƒë√£ format
   */
  const formatDate = (date) => {
    return new Date(date).toLocaleString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      hour12: false,
      timeZone: 'Asia/Ho_Chi_Minh' // Lu√¥n hi·ªÉn th·ªã theo gi·ªù Vi·ªát Nam
    });
  };

  /**
   * Handler khi click n√∫t x√≥a
   * @param {Object} exam - ƒê·ªÅ thi c·∫ßn x√≥a
   */
  const handleDeleteClick = (exam) => {
    setExamToDelete(exam);
    setDeleteModalOpen(true);
  };

  /**
   * X√°c nh·∫≠n x√≥a ƒë·ªÅ thi
   */
  const confirmDelete = () => {
    if (examToDelete) {
      onDelete(examToDelete._id);
      setDeleteModalOpen(false);
      setExamToDelete(null);
    }
  };

  /**
   * H·ªßy b·ªè thao t√°c x√≥a
   */
  const cancelDelete = () => {
    setDeleteModalOpen(false);
    setExamToDelete(null);
  };

  /**
   * Ki·ªÉm tra c√≥ th·ªÉ x√≥a ƒë·ªÅ thi kh√¥ng
   * @param {Object} exam - ƒê·ªÅ thi c·∫ßn ki·ªÉm tra
   * @returns {boolean} C√≥ th·ªÉ x√≥a hay kh√¥ng
   */
  const canDelete = (exam) => {
    // Ch·ªâ cho ph√©p x√≥a ƒë·ªÅ thi ·ªü tr·∫°ng th√°i draft ho·∫∑c scheduled (ch∆∞a c√≥ ai l√†m)
    return exam.status === 'draft' || exam.status === 'scheduled';
  };

  /**
   * L·∫•y style cho n√∫t gi√°m s√°t t√πy theo tr·∫°ng th√°i
   * @param {Object} exam - ƒê·ªÅ thi
   * @returns {string} CSS classes
   */
  const getMonitorButtonStyle = (exam) => {
    // M√†u s·∫Øc kh√°c nhau t√πy theo tr·∫°ng th√°i b√†i thi
    if (exam.status === 'active') {
      return 'bg-green-600 hover:bg-green-700 text-white';  // Xanh l√° khi ƒëang di·ªÖn ra
    } else if (exam.status === 'completed') {
      return 'bg-purple-600 hover:bg-purple-700 text-white'; // T√≠m khi ƒë√£ k·∫øt th√∫c
    } else {
      return 'bg-blue-600 hover:bg-blue-700 text-white';     // Xanh d∆∞∆°ng cho c√°c tr·∫°ng th√°i kh√°c
    }
  };

  return (
    <>
      {/* ==================== B·∫¢NG DANH S√ÅCH ƒê·ªÄ THI ==================== */}
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          {/* Header c·ªßa b·∫£ng */}
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Ti√™u ƒë·ªÅ
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Th·ªùi gian
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                S·ªë c√¢u h·ªèi
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Tr·∫°ng th√°i
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Tham gia
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Thao t√°c
              </th>
            </tr>
          </thead>
          
          {/* Body c·ªßa b·∫£ng */}
          <tbody className="bg-white divide-y divide-gray-200">
            {exams.map((exam) => (
              <tr key={exam._id} className="hover:bg-gray-50">
                {/* C·ªôt ti√™u ƒë·ªÅ */}
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-gray-900">
                    {exam.title}
                  </div>
                  <div className="text-sm text-gray-500">
                    {exam.description}
                  </div>
                </td>
                
                {/* C·ªôt th·ªùi gian */}
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">
                    B·∫Øt ƒë·∫ßu: {formatDate(exam.startTime)}
                  </div>
                  <div className="text-sm text-gray-500">
                    K·∫øt th√∫c: {formatDate(exam.endTime)}
                  </div>
                </td>
                
                {/* C·ªôt s·ªë c√¢u h·ªèi */}
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {exam.totalQuestions} c√¢u
                </td>
                
                {/* C·ªôt tr·∫°ng th√°i */}
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusBadgeClass(exam.status)}`}>
                    {getStatusText(exam.status)}
                  </span>
                </td>
                
                {/* C·ªôt s·ªë ng∆∞·ªùi tham gia */}
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {exam.participants?.length || 0} ng∆∞·ªùi
                </td>
                
                {/* C·ªôt thao t√°c */}
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div className="flex justify-end space-x-2">
                    {/* N√∫t s·ª≠a */}
                    <Link to={`/teacher/exams/${exam._id}/edit`}>
                      <Button variant="secondary" size="small" className="hover:bg-blue-100">
                        ‚úèÔ∏è S·ª≠a
                      </Button>
                    </Link>
                    
                    {/* N√∫t gi√°m s√°t */}
                    <Link to={`/teacher/exams/${exam._id}/monitor`}>
                      <Button variant="primary" size="small" className={getMonitorButtonStyle(exam)}>
                        üëÅÔ∏è Gi√°m s√°t
                      </Button>
                    </Link>
                    
                    {/* N√∫t xem k·∫øt qu·∫£ */}
                    <Link to={`/teacher/exams/${exam._id}/results`}>
                      <Button variant="primary" size="small" className="hover:bg-green-100">
                        üìä K·∫øt qu·∫£
                      </Button>
                    </Link>
                    
                    {/* N√∫t x√≥a (ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ th·ªÉ x√≥a) */}
                    {canDelete(exam) && (
                      <Button
                        variant="danger"
                        size="small"
                        onClick={() => handleDeleteClick(exam)}
                        className="hover:bg-red-100"
                      >
                        üóëÔ∏è X√≥a
                      </Button>
                    )}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* ==================== MODAL X√ÅC NH·∫¨N X√ìA ==================== */}
      <Modal
        isOpen={deleteModalOpen}
        onClose={cancelDelete}
        title="X√°c nh·∫≠n x√≥a ƒë·ªÅ thi"
      >
        <div className="p-6">
          <div className="mb-4">
            <p className="text-gray-600">
              B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë·ªÅ thi n√†y kh√¥ng?
            </p>
            
            {/* Hi·ªÉn th·ªã th√¥ng tin ƒë·ªÅ thi s·∫Ω x√≥a */}
            {examToDelete && (
              <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
                <p className="font-medium text-red-800">{examToDelete.title}</p>
                <p className="text-sm text-red-600 mt-1">
                  Tr·∫°ng th√°i: {getStatusText(examToDelete.status)}
                </p>
                <p className="text-sm text-red-600">
                  S·ªë c√¢u h·ªèi: {examToDelete.totalQuestions} c√¢u
                </p>
              </div>
            )}
            
            <p className="text-sm text-red-600 mt-3">
              ‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!
            </p>
          </div>
          
          {/* C√°c n√∫t thao t√°c */}
          <div className="flex justify-end space-x-3">
            <Button
              variant="secondary"
              onClick={cancelDelete}
            >
              H·ªßy b·ªè
            </Button>
            <Button
              variant="danger"
              onClick={confirmDelete}
            >
              X√≥a ƒë·ªÅ thi
            </Button>
          </div>
        </div>
      </Modal>
    </>
  );
};

export default ExamList; 