/**
 * Component TeacherDashboard - Trang dashboard ch√≠nh cho gi√°o vi√™n
 * Hi·ªÉn th·ªã t·ªïng quan v·ªÅ ho·∫°t ƒë·ªông gi·∫£ng d·∫°y, th·ªëng k√™ v√† c√°c thao t√°c nhanh
 */

import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import Card from "../../components/common/Card";
import Loading from "../../components/common/Loading";
import Alert from "../../components/common/Alert";
import { getAuthHeaders, createApiUrl } from "../../utils/api";

/**
 * TeacherDashboard component
 * @param {Object} user - Th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
 * @returns {JSX.Element} Trang dashboard v·ªõi th·ªëng k√™ v√† quick actions
 */
const TeacherDashboard = ({ user }) => {
  // State qu·∫£n l√Ω th·ªëng k√™ v√† d·ªØ li·ªáu
  const [stats, setStats] = useState({
    totalExams: 0,      // T·ªïng s·ªë ƒë·ªÅ thi
    activeExams: 0,     // S·ªë ƒë·ªÅ thi ƒëang ho·∫°t ƒë·ªông
    totalStudents: 0,   // T·ªïng s·ªë h·ªçc sinh
    totalResults: 0,    // T·ªïng s·ªë k·∫øt qu·∫£ thi
  });

  const [recentExams, setRecentExams] = useState([]); // Danh s√°ch ƒë·ªÅ thi g·∫ßn ƒë√¢y
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  // Effect ƒë·ªÉ fetch d·ªØ li·ªáu dashboard khi component mount
  useEffect(() => {
    fetchDashboardData();
  }, []);

  /**
   * Fetch t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt cho dashboard
   */
  const fetchDashboardData = async () => {
    try {
      setLoading(true);

      // ==================== FETCH EXAMS DATA ====================
      
      // L·∫•y danh s√°ch ƒë·ªÅ thi c·ªßa gi√°o vi√™n
      const examsResponse = await fetch(createApiUrl('/api/exams'), {
        headers: getAuthHeaders(),
      });

      const examsData = await examsResponse.json();
      const exams = examsResponse.ok ? examsData.data.exams || [] : [];

      // ==================== FETCH RESULTS DATA ====================
      
      // L·∫•y danh s√°ch k·∫øt qu·∫£ thi
      const resultsResponse = await fetch(createApiUrl('/api/results'), {
        headers: getAuthHeaders(),
      });

      const resultsData = await resultsResponse.json();
      const results = resultsResponse.ok ? resultsData.data.results || [] : [];

      // ==================== FETCH STUDENTS DATA ====================
      
      // L·∫•y danh s√°ch h·ªçc sinh
      const studentsResponse = await fetch(
        createApiUrl('/api/users?role=student'),
        {
          headers: getAuthHeaders(),
        }
      );

      const studentsData = await studentsResponse.json();
      const students = studentsResponse.ok ? studentsData.data.users || [] : [];

      // ==================== CALCULATE STATISTICS ====================
      
      // T√≠nh to√°n c√°c th·ªëng k√™
      const totalExams = exams.length;
      const activeExams = exams.filter(
        (exam) => exam.status === "scheduled"
      ).length;
      const totalResults = results.length;
      const totalStudents = students.length;

      setStats({
        totalExams,
        activeExams,
        totalResults,
        totalStudents,
      });

      // ==================== PREPARE RECENT EXAMS ====================
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÅ thi g·∫ßn ƒë√¢y (5 ƒë·ªÅ thi ƒë·∫ßu ti√™n)
      const recentExams = exams.slice(0, 5).map((exam) => ({
        id: exam._id,
        title: exam.title,
        status: exam.status,
        startTime: new Date(exam.startTime).toLocaleDateString("vi-VN"),
        participantCount: results.filter((result) => result.exam === exam._id)
          .length,
      }));

      setRecentExams(recentExams);
    } catch (err) {
      console.error("Fetch dashboard data error:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  /**
   * L·∫•y m√†u s·∫Øc CSS cho badge tr·∫°ng th√°i ƒë·ªÅ thi
   * @param {string} status - Tr·∫°ng th√°i ƒë·ªÅ thi
   * @returns {string} CSS classes cho m√†u s·∫Øc
   */
  const getStatusColor = (status) => {
    switch (status) {
      case "scheduled":
        return "bg-green-100 text-green-800";
      case "draft":
        return "bg-gray-100 text-gray-800";
      case "completed":
        return "bg-blue-100 text-blue-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  /**
   * Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i ƒë·ªÅ thi sang t√™n hi·ªÉn th·ªã ti·∫øng Vi·ªát
   * @param {string} status - Tr·∫°ng th√°i ƒë·ªÅ thi
   * @returns {string} T√™n hi·ªÉn th·ªã ti·∫øng Vi·ªát
   */
  const getStatusText = (status) => {
    switch (status) {
      case "scheduled":
        return "ƒê√£ l√™n l·ªãch";
      case "draft":
        return "B·∫£n nh√°p";
      case "completed":
        return "ƒê√£ k·∫øt th√∫c";
      default:
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  // Hi·ªÉn th·ªã loading n·∫øu ƒëang t·∫£i d·ªØ li·ªáu
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Loading size="lg" text="ƒêang t·∫£i d·ªØ li·ªáu..." />
      </div>
    );
  }

  // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Alert type="error" message={error} />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* ==================== HEADER ==================== */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">
            Dashboard Gi√°o vi√™n
          </h1>
          <p className="mt-2 text-gray-600">
            Ch√†o m·ª´ng {user?.name}, ƒë√¢y l√† t·ªïng quan gi·∫£ng d·∫°y c·ªßa b·∫°n
          </p>
        </div>

        {/* ==================== STATISTICS GRID ==================== */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {/* Card t·ªïng s·ªë ƒë·ªÅ thi */}
          <Card className="bg-white">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
                  <span className="text-white text-lg">üìù</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">T·ªïng ƒë·ªÅ thi</p>
                <p className="text-2xl font-semibold text-gray-900">
                  {stats.totalExams}
                </p>
              </div>
            </div>
          </Card>

          {/* Card ƒë·ªÅ thi ƒëang ho·∫°t ƒë·ªông */}
          <Card className="bg-white">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
                  <span className="text-white text-lg">‚è∞</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">
                  ƒêang ho·∫°t ƒë·ªông
                </p>
                <p className="text-2xl font-semibold text-gray-900">
                  {stats.activeExams}
                </p>
              </div>
            </div>
          </Card>

          {/* Card t·ªïng s·ªë h·ªçc sinh */}
          <Card className="bg-white">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-purple-500 rounded-md flex items-center justify-center">
                  <span className="text-white text-lg">üë•</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">H·ªçc sinh</p>
                <p className="text-2xl font-semibold text-gray-900">
                  {stats.totalStudents}
                </p>
              </div>
            </div>
          </Card>

          {/* Card t·ªïng s·ªë k·∫øt qu·∫£ thi */}
          <Card className="bg-white">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-orange-500 rounded-md flex items-center justify-center">
                  <span className="text-white text-lg">üìä</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">K·∫øt qu·∫£ thi</p>
                <p className="text-2xl font-semibold text-gray-900">
                  {stats.totalResults}
                </p>
              </div>
            </div>
          </Card>
        </div>

        {/* ==================== QUICK ACTIONS ==================== */}
        <div className="mb-8">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            Thao t√°c nhanh
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            {/* Card t·∫°o ƒë·ªÅ thi */}
            <Link to="/teacher/create-exam" className="block group">
              <Card className="bg-white hover:shadow-lg transition-shadow duration-200">
                <div className="text-center">
                  <div className="w-12 h-12 bg-blue-500 rounded-lg flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                    <span className="text-2xl text-white">‚ûï</span>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    T·∫°o ƒë·ªÅ thi
                  </h3>
                  <p className="text-sm text-gray-600">T·∫°o ƒë·ªÅ thi m·ªõi</p>
                </div>
              </Card>
            </Link>

            {/* Card qu·∫£n l√Ω ƒë·ªÅ thi */}
            <Link to="/teacher/exams" className="block group">
              <Card className="bg-white hover:shadow-lg transition-shadow duration-200">
                <div className="text-center">
                  <div className="w-12 h-12 bg-green-500 rounded-lg flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                    <span className="text-2xl text-white">üìù</span>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    Qu·∫£n l√Ω ƒë·ªÅ thi
                  </h3>
                  <p className="text-sm text-gray-600">
                    Xem v√† ch·ªânh s·ª≠a ƒë·ªÅ thi
                  </p>
                </div>
              </Card>
            </Link>

            {/* Card xem k·∫øt qu·∫£ */}
            <Link to="/teacher/results" className="block group">
              <Card className="bg-white hover:shadow-lg transition-shadow duration-200">
                <div className="text-center">
                  <div className="w-12 h-12 bg-purple-500 rounded-lg flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                    <span className="text-2xl text-white">üìä</span>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    Xem k·∫øt qu·∫£
                  </h3>
                  <p className="text-sm text-gray-600">
                    Xem k·∫øt qu·∫£ thi c·ªßa h·ªçc sinh
                  </p>
                </div>
              </Card>
            </Link>

            {/* Card qu·∫£n l√Ω h·ªçc sinh */}
            <Link to="/teacher/students" className="block group">
              <Card className="bg-white hover:shadow-lg transition-shadow duration-200">
                <div className="text-center">
                  <div className="w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                    <span className="text-2xl text-white">üë•</span>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    Qu·∫£n l√Ω h·ªçc sinh
                  </h3>
                  <p className="text-sm text-gray-600">
                    Xem danh s√°ch h·ªçc sinh
                  </p>
                </div>
              </Card>
            </Link>
          </div>
        </div>

        {/* ==================== RECENT EXAMS ==================== */}
        <div>
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            ƒê·ªÅ thi g·∫ßn ƒë√¢y
          </h2>
          <Card className="bg-white">
            {/* Hi·ªÉn th·ªã khi ch∆∞a c√≥ ƒë·ªÅ thi */}
            {recentExams.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-gray-500">Ch∆∞a c√≥ ƒë·ªÅ thi n√†o</p>
              </div>
            ) : (
              /* Danh s√°ch ƒë·ªÅ thi g·∫ßn ƒë√¢y */
              <div className="space-y-4">
                {recentExams.map((exam) => (
                  <div
                    key={exam.id}
                    className="flex items-center justify-between py-3 border-b border-gray-200 last:border-b-0"
                  >
                    {/* Th√¥ng tin ƒë·ªÅ thi */}
                    <div className="flex-1">
                      <h3 className="text-sm font-medium text-gray-900">
                        {exam.title}
                      </h3>
                      <div className="flex items-center space-x-4 mt-1">
                        <p className="text-sm text-gray-600">
                          Tham gia: {exam.participantCount} h·ªçc sinh
                        </p>
                        {exam.startTime && (
                          <p className="text-xs text-gray-500">
                            B·∫Øt ƒë·∫ßu: {exam.startTime}
                          </p>
                        )}
                      </div>
                    </div>
                    {/* Tr·∫°ng th√°i v√† link chi ti·∫øt */}
                    <div className="ml-4 flex items-center space-x-2">
                      <span
                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(
                          exam.status
                        )}`}
                      >
                        {getStatusText(exam.status)}
                      </span>
                      <Link
                        to={`/teacher/exams/${exam.id}/results`}
                        className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                      >
                        Chi ti·∫øt
                      </Link>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </Card>
        </div>
      </div>
    </div>
  );
};

export default TeacherDashboard;
