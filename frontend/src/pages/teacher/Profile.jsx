/**
 * Component Profile - Trang th√¥ng tin c√° nh√¢n cho gi√°o vi√™n
 * Cho ph√©p gi√°o vi√™n xem, ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n v√† ƒë·ªïi m·∫≠t kh·∫©u
 */

import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Card from "../../components/common/Card";
import Button from "../../components/common/Button";
import Alert from "../../components/common/Alert";
import Loading from "../../components/common/Loading";
import Modal from "../../components/common/Modal";
import ProfileForm from "../../components/common/ProfileForm";
import ChangePasswordForm from "../../components/common/ChangePasswordForm";
import { getAuthHeaders } from "../../utils/api";

/**
 * Profile component
 * @returns {JSX.Element} Trang th√¥ng tin c√° nh√¢n v·ªõi form ch·ªânh s·ª≠a v√† ƒë·ªïi m·∫≠t kh·∫©u
 */
const Profile = () => {
  const navigate = useNavigate();
  
  // State qu·∫£n l√Ω tr·∫°ng th√°i v√† d·ªØ li·ªáu
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [user, setUser] = useState(null);
  const [showEditForm, setShowEditForm] = useState(false);
  const [showPasswordForm, setShowPasswordForm] = useState(false);
  const [successMessage, setSuccessMessage] = useState("");

  // Effect ƒë·ªÉ fetch th√¥ng tin ng∆∞·ªùi d√πng khi component mount
  useEffect(() => {
    fetchUserProfile();
  }, []);

  /**
   * Fetch th√¥ng tin profile c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
   */
  const fetchUserProfile = async () => {
    try {
      setLoading(true);
      const response = await fetch("http://localhost:5000/api/users/profile", {
        headers: getAuthHeaders(),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin c√° nh√¢n");
      }
      setUser(data.data.user);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  /**
   * Chuy·ªÉn ƒë·ªïi role sang t√™n hi·ªÉn th·ªã ti·∫øng Vi·ªát
   * @param {string} role - Role c·ªßa ng∆∞·ªùi d√πng
   * @returns {string} T√™n hi·ªÉn th·ªã ti·∫øng Vi·ªát
   */
  const getRoleDisplayName = (role) => {
    switch (role) {
      case "student":
        return "H·ªçc sinh";
      case "teacher":
        return "Gi√°o vi√™n";
      case "admin":
        return "Qu·∫£n tr·ªã vi√™n";
      default:
        return role;
    }
  };

  /**
   * Format ng√†y th√°ng theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
   * @param {string} dateString - Chu·ªói ng√†y th√°ng
   * @returns {string} Ng√†y th√°ng ƒë√£ format
   */
  const formatDate = (dateString) => {
    if (!dateString) return "N/A";
    return new Date(dateString).toLocaleDateString("vi-VN", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  /**
   * X·ª≠ l√Ω khi c·∫≠p nh·∫≠t th√¥ng tin profile th√†nh c√¥ng
   * @param {Object} updatedUser - Th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ c·∫≠p nh·∫≠t
   */
  const handleProfileUpdate = (updatedUser) => {
    setUser(updatedUser);
    setShowEditForm(false);
    setSuccessMessage("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
    setTimeout(() => setSuccessMessage(""), 3000);
  };

  /**
   * X·ª≠ l√Ω khi ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng
   * @param {string} message - Th√¥ng b√°o th√†nh c√¥ng
   */
  const handlePasswordChange = (message) => {
    setShowPasswordForm(false);
    setSuccessMessage(message);
    setTimeout(() => setSuccessMessage(""), 3000);
  };

  // Hi·ªÉn th·ªã loading n·∫øu ƒëang t·∫£i d·ªØ li·ªáu
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Loading size="lg" text="ƒêang t·∫£i th√¥ng tin..." />
      </div>
    );
  }

  return (
    <div className="max-w-xl mx-auto py-8 px-4">
      {/* ==================== HEADER ==================== */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Th√¥ng tin c√° nh√¢n</h1>
        <div className="flex gap-3">
          {/* N√∫t ch·ªânh s·ª≠a th√¥ng tin */}
          <Button
            onClick={() => setShowEditForm(true)}
          >
            ‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin
          </Button>
          {/* N√∫t ƒë·ªïi m·∫≠t kh·∫©u */}
          <Button
            variant="outline"
            onClick={() => setShowPasswordForm(true)}
          >
            üîí ƒê·ªïi m·∫≠t kh·∫©u
          </Button>
          {/* N√∫t quay v·ªÅ trang ch·ªß */}
          <Button
            variant="secondary"
            onClick={() => navigate("/teacher/dashboard")}
          >
            Quay v·ªÅ trang ch·ªß
          </Button>
        </div>
      </div>

      {/* Hi·ªÉn th·ªã l·ªói v√† th√¥ng b√°o th√†nh c√¥ng */}
      {error && (
        <Alert type="error" message={error} onClose={() => setError("")} />
      )}
      
      {successMessage && (
        <Alert type="success" message={successMessage} onClose={() => setSuccessMessage("")} />
      )}

      {/* ==================== PROFILE INFORMATION CARD ==================== */}
      <Card title="üë®‚Äçüè´ Th√¥ng tin gi√°o vi√™n">
        <div className="space-y-4">
          {/* H·ªç v√† t√™n */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              H·ªç v√† t√™n
            </label>
            <div className="px-3 py-2 bg-gray-100 rounded-md text-gray-700">
              {user?.name || "N/A"}
            </div>
          </div>
          
          {/* Email */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <div className="px-3 py-2 bg-gray-100 rounded-md text-gray-700">
              {user?.email || "N/A"}
            </div>
          </div>
          
          {/* Vai tr√≤ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Vai tr√≤
            </label>
            <div className="px-3 py-2 bg-gray-100 rounded-md text-gray-700">
              {getRoleDisplayName(user?.role)}
            </div>
          </div>
          
          {/* Ng√†y tham gia */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Ng√†y tham gia
            </label>
            <div className="px-3 py-2 bg-gray-100 rounded-md text-gray-700">
              {formatDate(user?.createdAt)}
            </div>
          </div>
          
          {/* ƒêƒÉng nh·∫≠p l·∫ßn cu·ªëi */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              ƒêƒÉng nh·∫≠p l·∫ßn cu·ªëi
            </label>
            <div className="px-3 py-2 bg-gray-100 rounded-md text-gray-700">
              {formatDate(user?.lastLogin)}
            </div>
          </div>
          
          {/* Th·ªëng k√™ d√†nh ri√™ng cho gi√°o vi√™n */}
          {user?.role === "teacher" && (
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  S·ªë ƒë·ªÅ thi ƒë√£ t·∫°o
                </label>
                <div className="px-3 py-2 bg-gray-100 rounded-md text-gray-700">
                  {user?.totalExams || 0}
                </div>
              </div>
            </>
          )}
        </div>
      </Card>

      {/* ==================== EDIT PROFILE MODAL ==================== */}
      <Modal
        isOpen={showEditForm}
        onClose={() => setShowEditForm(false)}
        title="Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n"
      >
        <ProfileForm
          user={user}
          onUpdate={handleProfileUpdate}
          onCancel={() => setShowEditForm(false)}
        />
      </Modal>

      {/* ==================== CHANGE PASSWORD MODAL ==================== */}
      <Modal
        isOpen={showPasswordForm}
        onClose={() => setShowPasswordForm(false)}
        title="ƒê·ªïi m·∫≠t kh·∫©u"
      >
        <ChangePasswordForm
          onSuccess={handlePasswordChange}
          onCancel={() => setShowPasswordForm(false)}
        />
      </Modal>
    </div>
  );
};

export default Profile;
