/**
 * Component AdminExams - Trang qu·∫£n l√Ω ƒë·ªÅ thi cho admin
 * Cho ph√©p admin xem, qu·∫£n l√Ω t·∫•t c·∫£ ƒë·ªÅ thi trong h·ªá th·ªëng t·ª´ m·ªçi gi√°o vi√™n
 */

import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import Card from '../../components/common/Card';
import Button from '../../components/common/Button';
import Alert from '../../components/common/Alert';
import Loading from '../../components/common/Loading';
import { getAuthHeaders } from '../../utils/api';

/**
 * AdminExams component
 * @returns {JSX.Element} Trang qu·∫£n l√Ω ƒë·ªÅ thi v·ªõi b·∫£ng hi·ªÉn th·ªã v√† c√°c thao t√°c CRUD
 */
const AdminExams = () => {
  // State qu·∫£n l√Ω danh s√°ch ƒë·ªÅ thi v√† tr·∫°ng th√°i
  const [exams, setExams] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Effect ƒë·ªÉ fetch danh s√°ch ƒë·ªÅ thi khi component mount
  useEffect(() => {
    fetchExams();
  }, []);

  /**
   * Fetch danh s√°ch t·∫•t c·∫£ ƒë·ªÅ thi t·ª´ API
   */
  const fetchExams = async () => {
    try {
      setLoading(true);
      const response = await fetch('http://localhost:5000/api/exams', {
        headers: getAuthHeaders()
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·ªÅ thi');
      }
      setExams(data.data.exams);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  /**
   * Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i ƒë·ªÅ thi sang t√™n hi·ªÉn th·ªã ti·∫øng Vi·ªát
   * @param {string} status - Tr·∫°ng th√°i ƒë·ªÅ thi (draft, scheduled, active, completed)
   * @returns {string} T√™n hi·ªÉn th·ªã ti·∫øng Vi·ªát
   */
  const getStatusDisplayName = (status) => {
    switch (status) {
      case 'draft':
        return 'Nh√°p';
      case 'scheduled':
        return 'ƒê√£ l√™n l·ªãch';
      case 'active':
        return 'ƒêang di·ªÖn ra';
      case 'completed':
        return 'ƒê√£ k·∫øt th√∫c';
      default:
        return status;
    }
  };

  /**
   * L·∫•y m√†u s·∫Øc CSS cho badge tr·∫°ng th√°i
   * @param {string} status - Tr·∫°ng th√°i ƒë·ªÅ thi
   * @returns {string} CSS classes cho m√†u s·∫Øc
   */
  const getStatusColor = (status) => {
    switch (status) {
      case 'draft':
        return 'bg-gray-100 text-gray-800';
      case 'scheduled':
        return 'bg-blue-100 text-blue-800';
      case 'active':
        return 'bg-green-100 text-green-800';
      case 'completed':
        return 'bg-purple-100 text-purple-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  /**
   * Format ng√†y gi·ªù theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
   * @param {string} dateString - Chu·ªói ng√†y gi·ªù
   * @returns {string} Ng√†y gi·ªù ƒë√£ format
   */
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  /**
   * X√≥a ƒë·ªÅ thi v·ªõi x√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng
   * @param {string} examId - ID c·ªßa ƒë·ªÅ thi c·∫ßn x√≥a
   */
  const handleDeleteExam = async (examId) => {
    // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë·ªÅ thi n√†y?')) {
      return;
    }

    try {
      setLoading(true);
      setError('');
      
      // G·ªçi API x√≥a ƒë·ªÅ thi
      const response = await fetch(`http://localhost:5000/api/exams/${examId}`, {
        method: 'DELETE',
        headers: getAuthHeaders()
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'C√≥ l·ªói x·∫£y ra khi x√≥a ƒë·ªÅ thi');
      }

      // Refresh danh s√°ch sau khi x√≥a th√†nh c√¥ng
      fetchExams();
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // Hi·ªÉn th·ªã loading n·∫øu ƒëang t·∫£i d·ªØ li·ªáu
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Loading size="lg" text="ƒêang t·∫£i danh s√°ch ƒë·ªÅ thi..." />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* ==================== HEADER ==================== */}
        <div className="mb-8 flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              Qu·∫£n l√Ω ƒë·ªÅ thi
            </h1>
            <p className="mt-2 text-gray-600">
              Qu·∫£n l√Ω t·∫•t c·∫£ ƒë·ªÅ thi trong h·ªá th·ªëng
            </p>
          </div>
          {/* N√∫t t·∫°o ƒë·ªÅ thi m·ªõi - chuy·ªÉn ƒë·∫øn trang teacher */}
          <Link to="/teacher/create-exam">
            <Button>
              ‚ûï T·∫°o ƒë·ªÅ thi m·ªõi
            </Button>
          </Link>
        </div>

        {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
        {error && (
          <Alert type="error" message={error} onClose={() => setError('')} />
        )}

        {/* ==================== TABLE OF EXAMS ==================== */}
        <Card>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              {/* Header c·ªßa b·∫£ng */}
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ƒê·ªÅ thi
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Gi√°o vi√™n
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Tr·∫°ng th√°i
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Th·ªùi gian
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Thao t√°c
                  </th>
                </tr>
              </thead>
              {/* Body c·ªßa b·∫£ng */}
              <tbody className="bg-white divide-y divide-gray-200">
                {exams.map((exam) => (
                  <tr key={exam._id}>
                    {/* Th√¥ng tin ƒë·ªÅ thi */}
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900">
                          {exam.title}
                        </div>
                        <div className="text-sm text-gray-500">
                          {exam.totalQuestions} c√¢u h·ªèi ‚Ä¢ {exam.duration} ph√∫t
                        </div>
                      </div>
                    </td>
                    {/* Th√¥ng tin gi√°o vi√™n t·∫°o ƒë·ªÅ */}
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        {exam.createdBy?.name || 'N/A'}
                      </div>
                      <div className="text-sm text-gray-500">
                        {exam.createdBy?.email || 'N/A'}
                      </div>
                    </td>
                    {/* Tr·∫°ng th√°i ƒë·ªÅ thi v·ªõi badge m√†u */}
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(exam.status)}`}>
                        {getStatusDisplayName(exam.status)}
                      </span>
                    </td>
                    {/* Th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c */}
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <div>
                        <div>B·∫Øt ƒë·∫ßu: {formatDate(exam.startTime)}</div>
                        <div>K·∫øt th√∫c: {formatDate(exam.endTime)}</div>
                      </div>
                    </td>
                    {/* C√°c n√∫t thao t√°c */}
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex space-x-2">
                        {/* N√∫t s·ª≠a ƒë·ªÅ thi */}
                        <Link to={`/teacher/exams/${exam._id}/edit`}>
                          <Button variant="outline" size="sm">
                            ‚úèÔ∏è S·ª≠a
                          </Button>
                        </Link>
                        {/* N√∫t theo d√µi ƒë·ªÅ thi ƒëang di·ªÖn ra */}
                        <Link to={`/teacher/exams/${exam._id}/monitor`}>
                          <Button variant="outline" size="sm">
                            üëÅÔ∏è Theo d√µi
                          </Button>
                        </Link>
                        {/* N√∫t xem k·∫øt qu·∫£ */}
                        <Link to={`/teacher/exams/${exam._id}/results`}>
                          <Button variant="outline" size="sm">
                            üìä K·∫øt qu·∫£
                          </Button>
                        </Link>
                        {/* N√∫t x√≥a ƒë·ªÅ thi */}
                        <Button
                          variant="danger"
                          size="sm"
                          onClick={() => handleDeleteExam(exam._id)}
                        >
                          üóëÔ∏è X√≥a
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </Card>

        {/* ==================== EMPTY STATE ==================== */}
        {/* Hi·ªÉn th·ªã khi ch∆∞a c√≥ ƒë·ªÅ thi n√†o */}
        {exams.length === 0 && !loading && (
          <Card className="text-center py-12">
            <div className="text-gray-500">
              <div className="text-6xl mb-4">üìù</div>
              <h3 className="text-lg font-medium mb-2">Ch∆∞a c√≥ ƒë·ªÅ thi n√†o</h3>
              <p className="mb-4">B·∫Øt ƒë·∫ßu t·∫°o ƒë·ªÅ thi ƒë·∫ßu ti√™n ƒë·ªÉ qu·∫£n l√Ω h·ªá th·ªëng</p>
              <Link to="/teacher/create-exam">
                <Button>
                  T·∫°o ƒë·ªÅ thi ƒë·∫ßu ti√™n
                </Button>
              </Link>
            </div>
          </Card>
        )}
      </div>
    </div>
  );
};

export default AdminExams; 