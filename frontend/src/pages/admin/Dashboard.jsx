/**
 * Component AdminDashboard - Dashboard cho admin
 * Hi·ªÉn th·ªã t·ªïng quan h·ªá th·ªëng v·ªõi th·ªëng k√™ v√† c√°c thao t√°c nhanh
 */

import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import Card from '../../components/common/Card';
import Loading from '../../components/common/Loading';
import Alert from '../../components/common/Alert';
import { getAuthHeaders } from '../../utils/api';

/**
 * AdminDashboard component
 * @param {Object} user - Th√¥ng tin user admin hi·ªán t·∫°i
 * @returns {JSX.Element} Dashboard v·ªõi th·ªëng k√™ v√† quick actions
 */
const AdminDashboard = ({ user }) => {
  // State qu·∫£n l√Ω th·ªëng k√™ v√† tr·∫°ng th√°i
  const [stats, setStats] = useState({
    totalUsers: 0,      // T·ªïng s·ªë ng∆∞·ªùi d√πng
    totalExams: 0,      // T·ªïng s·ªë ƒë·ªÅ thi
    totalResults: 0,    // T·ªïng s·ªë k·∫øt qu·∫£ thi
    activeExams: 0      // S·ªë ƒë·ªÅ thi ƒëang ho·∫°t ƒë·ªông
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Effect ƒë·ªÉ fetch th·ªëng k√™ khi component mount
  useEffect(() => {
    fetchDashboardStats();
  }, []);

  /**
   * Fetch th·ªëng k√™ dashboard t·ª´ c√°c API
   */
  const fetchDashboardStats = async () => {
    try {
      setLoading(true);
      setError('');

      // ==================== FETCH USERS COUNT ====================
      
      // L·∫•y s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng
      const usersResponse = await fetch('http://localhost:5000/api/users', {
        headers: getAuthHeaders()
      });
      const usersData = await usersResponse.json();
      const totalUsers = usersData.data?.users?.length || 0;

      // ==================== FETCH EXAMS COUNT ====================
      
      // L·∫•y s·ªë l∆∞·ª£ng ƒë·ªÅ thi
      const examsResponse = await fetch('http://localhost:5000/api/exams', {
        headers: getAuthHeaders()
      });
      const examsData = await examsResponse.json();
      const totalExams = examsData.data?.exams?.length || 0;

      // ==================== FETCH RESULTS COUNT ====================
      
      // L·∫•y s·ªë l∆∞·ª£ng k·∫øt qu·∫£ thi
      const resultsResponse = await fetch('http://localhost:5000/api/results', {
        headers: getAuthHeaders()
      });
      const resultsData = await resultsResponse.json();
      const totalResults = resultsData.data?.results?.length || 0;

      // ==================== CALCULATE ACTIVE EXAMS ====================
      
      // T√≠nh s·ªë ƒë·ªÅ thi ƒëang ho·∫°t ƒë·ªông (status = 'active')
      const activeExams = examsData.data?.exams?.filter(exam => exam.status === 'active').length || 0;

      // C·∫≠p nh·∫≠t state v·ªõi th·ªëng k√™
      setStats({
        totalUsers,
        totalExams,
        totalResults,
        activeExams
      });
    } catch (err) {
      setError('Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ dashboard');
      console.error('Error fetching dashboard stats:', err);
    } finally {
      setLoading(false);
    }
  };

  // Danh s√°ch c√°c thao t√°c nhanh
  const quickActions = [
    {
      title: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng',
      description: 'Th√™m, s·ª≠a, x√≥a ng∆∞·ªùi d√πng',
      icon: 'üë•',
      link: '/admin/users',
      color: 'bg-blue-500'
    },
    {
      title: 'Qu·∫£n l√Ω ƒë·ªÅ thi',
      description: 'T·∫°o v√† qu·∫£n l√Ω ƒë·ªÅ thi',
      icon: 'üìù',
      link: '/admin/exams',
      color: 'bg-green-500'
    },
    {
      title: 'Xem b√°o c√°o',
      description: 'Th·ªëng k√™ v√† b√°o c√°o',
      icon: 'üìä',
      link: '/admin/reports',
      color: 'bg-purple-500'
    },
    {
      title: 'C√†i ƒë·∫∑t h·ªá th·ªëng',
      description: 'C·∫•u h√¨nh h·ªá th·ªëng',
      icon: '‚öôÔ∏è',
      link: '/admin/settings',
      color: 'bg-orange-500'
    }
  ];

  // Hi·ªÉn th·ªã loading n·∫øu ƒëang t·∫£i d·ªØ li·ªáu
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Loading size="lg" text="ƒêang t·∫£i th·ªëng k√™..." />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* ==================== HEADER ==================== */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">
            Dashboard Admin
          </h1>
          <p className="mt-2 text-gray-600">
            Ch√†o m·ª´ng {user?.name}, ƒë√¢y l√† t·ªïng quan h·ªá th·ªëng
          </p>
        </div>

        {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
        {error && (
          <Alert type="error" message={error} onClose={() => setError('')} />
        )}

        {/* ==================== STATS GRID ==================== */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {/* Card t·ªïng ng∆∞·ªùi d√πng */}
          <Card className="bg-white">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
                  <span className="text-white text-lg">üë•</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">T·ªïng ng∆∞·ªùi d√πng</p>
                <p className="text-2xl font-semibold text-gray-900">{stats.totalUsers}</p>
              </div>
            </div>
          </Card>

          {/* Card t·ªïng ƒë·ªÅ thi */}
          <Card className="bg-white">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
                  <span className="text-white text-lg">üìù</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">T·ªïng ƒë·ªÅ thi</p>
                <p className="text-2xl font-semibold text-gray-900">{stats.totalExams}</p>
              </div>
            </div>
          </Card>

          {/* Card t·ªïng k·∫øt qu·∫£ */}
          <Card className="bg-white">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-purple-500 rounded-md flex items-center justify-center">
                  <span className="text-white text-lg">üìä</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">T·ªïng k·∫øt qu·∫£</p>
                <p className="text-2xl font-semibold text-gray-900">{stats.totalResults}</p>
              </div>
            </div>
          </Card>

          {/* Card ƒë·ªÅ thi ƒëang ho·∫°t ƒë·ªông */}
          <Card className="bg-white">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-orange-500 rounded-md flex items-center justify-center">
                  <span className="text-white text-lg">‚è∞</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">ƒê·ªÅ thi ƒëang ho·∫°t ƒë·ªông</p>
                <p className="text-2xl font-semibold text-gray-900">{stats.activeExams}</p>
              </div>
            </div>
          </Card>
        </div>

        {/* ==================== QUICK ACTIONS ==================== */}
        <div className="mb-8">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            Thao t√°c nhanh
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {quickActions.map((action, index) => (
              <Link
                key={index}
                to={action.link}
                className="block group"
              >
                <Card className="bg-white hover:shadow-lg transition-shadow duration-200">
                  <div className="text-center">
                    <div className={`w-12 h-12 ${action.color} rounded-lg flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200`}>
                      <span className="text-2xl">{action.icon}</span>
                    </div>
                    <h3 className="text-lg font-medium text-gray-900 mb-2">
                      {action.title}
                    </h3>
                    <p className="text-sm text-gray-600">
                      {action.description}
                    </p>
                  </div>
                </Card>
              </Link>
            ))}
          </div>
        </div>

        {/* ==================== RECENT ACTIVITY ==================== */}
        <div>
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
          </h2>
          <Card className="bg-white">
            <div className="space-y-4">
              {/* Ho·∫°t ƒë·ªông 1: Ng∆∞·ªùi d√πng m·ªõi ƒëƒÉng k√Ω */}
              <div className="flex items-center justify-between py-3 border-b border-gray-200">
                <div className="flex items-center">
                  <div className="w-2 h-2 bg-green-500 rounded-full mr-3"></div>
                  <span className="text-sm text-gray-700">Ng∆∞·ªùi d√πng m·ªõi ƒëƒÉng k√Ω: Nguy·ªÖn VƒÉn A</span>
                </div>
                <span className="text-xs text-gray-500">2 ph√∫t tr∆∞·ªõc</span>
              </div>
              
              {/* Ho·∫°t ƒë·ªông 2: ƒê·ªÅ thi m·ªõi ƒë∆∞·ª£c t·∫°o */}
              <div className="flex items-center justify-between py-3 border-b border-gray-200">
                <div className="flex items-center">
                  <div className="w-2 h-2 bg-blue-500 rounded-full mr-3"></div>
                  <span className="text-sm text-gray-700">ƒê·ªÅ thi m·ªõi ƒë∆∞·ª£c t·∫°o: To√°n h·ªçc l·ªõp 10</span>
                </div>
                <span className="text-xs text-gray-500">15 ph√∫t tr∆∞·ªõc</span>
              </div>
              
              {/* Ho·∫°t ƒë·ªông 3: K·∫øt qu·∫£ thi ƒë∆∞·ª£c c·∫≠p nh·∫≠t */}
              <div className="flex items-center justify-between py-3">
                <div className="flex items-center">
                  <div className="w-2 h-2 bg-purple-500 rounded-full mr-3"></div>
                  <span className="text-sm text-gray-700">K·∫øt qu·∫£ thi ƒë∆∞·ª£c c·∫≠p nh·∫≠t</span>
                </div>
                <span className="text-xs text-gray-500">1 gi·ªù tr∆∞·ªõc</span>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default AdminDashboard; 