/**
 * Component ExamResult - Trang k·∫øt qu·∫£ b√†i thi cho h·ªçc sinh
 * Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªïng quan c·ªßa m·ªôt b√†i thi ƒë√£ ho√†n th√†nh
 */

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Loading from '../../components/common/Loading';
import Alert from '../../components/common/Alert';
import Button from '../../components/common/Button';
import Card from '../../components/common/Card';
import { getAuthHeaders } from '../../utils/api';

/**
 * ExamResult component
 * @returns {JSX.Element} Trang k·∫øt qu·∫£ b√†i thi v·ªõi th·ªëng k√™ t·ªïng quan v√† t√≥m t·∫Øt
 */
const ExamResult = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  
  // State qu·∫£n l√Ω k·∫øt qu·∫£ b√†i thi v√† tr·∫°ng th√°i
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Effect ƒë·ªÉ fetch k·∫øt qu·∫£ b√†i thi khi id thay ƒë·ªïi
  useEffect(() => {
    fetchResult();
  }, [id]);

  /**
   * Fetch k·∫øt qu·∫£ b√†i thi c·ªßa h·ªçc sinh hi·ªán t·∫°i
   */
  const fetchResult = async () => {
    try {
      setLoading(true);
      console.log('Fetching result for exam:', id);
      
      // T√¨m result c·ªßa user hi·ªán t·∫°i cho b√†i thi n√†y
      const response = await fetch(createApiUrl(`/api/results?exam=${id}`), {
        headers: getAuthHeaders()
      });
      const data = await response.json();
      console.log('API response:', data);
      
      if (!response.ok) throw new Error(data.message || 'Kh√¥ng th·ªÉ t·∫£i k·∫øt qu·∫£');
      
      // L·∫•y result completed m·ªõi nh·∫•t c·ªßa user hi·ªán t·∫°i
      const myResults = data.data.results.filter(r => r.status === 'completed');
      console.log('My completed results:', myResults);
      
      const myResult = myResults.length > 0 
        ? myResults.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))[0]
        : null;
      
      console.log('Selected result:', myResult);
      setResult(myResult);
    } catch (err) {
      console.error('Error fetching result:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // Hi·ªÉn th·ªã loading n·∫øu ƒëang t·∫£i d·ªØ li·ªáu
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Loading size="lg" text="ƒêang t·∫£i k·∫øt qu·∫£..." />
      </div>
    );
  }

  // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <div className="max-w-md w-full">
          <Alert type="error" message={error} onClose={() => setError('')} />
          <div className="mt-4 text-center">
            <Button variant="secondary" onClick={() => navigate('/student/exams')}>
              Quay v·ªÅ danh s√°ch b√†i thi
            </Button>
          </div>
        </div>
      </div>
    );
  }

  // Hi·ªÉn th·ªã khi kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£
  if (!result) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <div className="max-w-md w-full">
          <Alert type="error" message="Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ b√†i thi." />
          <div className="mt-4 text-center">
            <Button variant="secondary" onClick={() => navigate('/student/exams')}>
              Quay v·ªÅ danh s√°ch b√†i thi
            </Button>
          </div>
        </div>
      </div>
    );
  }

  /**
   * L·∫•y m√†u s·∫Øc CSS cho ƒëi·ªÉm s·ªë
   * @param {number} score - ƒêi·ªÉm s·ªë (0-100)
   * @returns {string} CSS class cho m√†u s·∫Øc
   */
  const getScoreColor = (score) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  /**
   * L·∫•y emoji t∆∞∆°ng ·ª©ng v·ªõi ƒëi·ªÉm s·ªë
   * @param {number} score - ƒêi·ªÉm s·ªë (0-100)
   * @returns {string} Emoji
   */
  const getScoreEmoji = (score) => {
    if (score >= 90) return 'üèÜ';
    if (score >= 80) return 'üéâ';
    if (score >= 70) return 'üëç';
    if (score >= 60) return 'üòä';
    if (score >= 50) return 'üòê';
    return 'üòî';
  };

  return (
    <div className="max-w-4xl mx-auto py-8 px-4">
      <Card className="bg-white rounded-lg shadow-lg p-6">
        {/* ==================== HEADER ==================== */}
        <div className="flex justify-between items-center mb-6">
          <div>
            <h1 className="text-2xl font-bold mb-2">K·∫øt qu·∫£ b√†i thi: {result.exam?.title}</h1>
            <div className="flex items-center space-x-4">
              <span className={`text-3xl font-bold ${getScoreColor(result.score)}`}>
                {result.score}%
              </span>
              <span className="text-3xl">{getScoreEmoji(result.score)}</span>
            </div>
          </div>
          <div className="flex space-x-2">
            <Button 
              variant="outline" 
              onClick={() => navigate(`/student/exams/${id}/detail-result`)}
            >
              Xem chi ti·∫øt
            </Button>
            <Button variant="secondary" onClick={() => navigate('/student/exams')}>
              Quay v·ªÅ danh s√°ch
            </Button>
          </div>
        </div>
        
        {/* ==================== OVERVIEW STATISTICS ==================== */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          {/* Card ƒëi·ªÉm s·ªë */}
          <div className="bg-blue-50 p-4 rounded-lg">
            <p className="text-sm text-gray-600">ƒêi·ªÉm s·ªë</p>
            <p className="text-2xl font-bold text-blue-600">{result.correctAnswers}/{result.totalQuestions} ({result.score}%)</p>
          </div>
          
          {/* Card th·ªùi gian l√†m b√†i */}
          <div className="bg-green-50 p-4 rounded-lg">
            <p className="text-sm text-gray-600">Th·ªùi gian l√†m b√†i</p>
            <p className="text-2xl font-bold text-green-600">
              {Math.round((new Date(result.endTime) - new Date(result.startTime)) / 60000)} ph√∫t
            </p>
          </div>
          
          {/* Card ng√†y l√†m b√†i */}
          <div className="bg-purple-50 p-4 rounded-lg">
            <p className="text-sm text-gray-600">Ng√†y l√†m b√†i</p>
            <p className="text-2xl font-bold text-purple-600">
              {new Date(result.createdAt).toLocaleDateString('vi-VN')}
            </p>
          </div>
        </div>

        {/* ==================== ANSWER SUMMARY ==================== */}
        <div className="space-y-4">
          <h2 className="text-xl font-semibold mb-4">T√≥m t·∫Øt b√†i l√†m</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Card c√¢u tr·∫£ l·ªùi ƒë√∫ng */}
            <div className="bg-green-50 p-4 rounded-lg">
              <p className="text-sm text-gray-600">C√¢u tr·∫£ l·ªùi ƒë√∫ng</p>
              <p className="text-2xl font-bold text-green-600">{result.correctAnswers}</p>
            </div>
            
            {/* Card c√¢u tr·∫£ l·ªùi sai */}
            <div className="bg-red-50 p-4 rounded-lg">
              <p className="text-sm text-gray-600">C√¢u tr·∫£ l·ªùi sai</p>
              <p className="text-2xl font-bold text-red-600">
                {result.answers ? result.answers.filter(a => a.hasAnswered && !a.isCorrect).length : result.totalQuestions - result.correctAnswers}
              </p>
            </div>
            
            {/* Card c√¢u ch∆∞a tr·∫£ l·ªùi */}
            <div className="bg-gray-50 p-4 rounded-lg">
              <p className="text-sm text-gray-600">C√¢u ch∆∞a tr·∫£ l·ªùi</p>
              <p className="text-2xl font-bold text-gray-600">
                {result.answers ? result.answers.filter(a => !a.hasAnswered).length : 0}
              </p>
            </div>
          </div>
        </div>

        {/* ==================== RETRY BUTTON ==================== */}
        <div className="mt-6 text-center">
          <Button 
            variant="outline" 
            onClick={() => navigate(`/student/exams/${id}/start?retry=1`)}
          >
            L√†m l·∫°i b√†i thi
          </Button>
        </div>
      </Card>
    </div>
  );
};

export default ExamResult; 