/**
 * Component StudentDashboard - Trang dashboard ch√≠nh cho h·ªçc sinh
 * Hi·ªÉn th·ªã t·ªïng quan v·ªÅ ho·∫°t ƒë·ªông h·ªçc t·∫≠p, th·ªëng k√™ v√† c√°c thao t√°c nhanh
 */

import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import Card from '../../components/common/Card';
import Loading from '../../components/common/Loading';
import Alert from '../../components/common/Alert';
import { getAuthHeaders } from '../../utils/api';
import { createApiUrl } from '../utils/api';

/**
 * StudentDashboard component
 * @param {Object} user - Th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
 * @returns {JSX.Element} Trang dashboard v·ªõi th·ªëng k√™ h·ªçc t·∫≠p v√† quick actions
 */
const StudentDashboard = ({ user }) => {
  // State qu·∫£n l√Ω th·ªëng k√™ v√† d·ªØ li·ªáu
  const [stats, setStats] = useState({
    completedExams: 0,    // S·ªë b√†i thi ƒë√£ ho√†n th√†nh
    averageScore: 0,      // ƒêi·ªÉm trung b√¨nh
    upcomingExams: 0,     // S·ªë b√†i thi s·∫Øp t·ªõi
    totalExams: 0         // T·ªïng s·ªë ƒë·ªÅ thi
  });

  const [recentExams, setRecentExams] = useState([]); // Danh s√°ch b√†i thi g·∫ßn ƒë√¢y
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Effect ƒë·ªÉ fetch d·ªØ li·ªáu dashboard khi component mount
  useEffect(() => {
    fetchDashboardData();
  }, []);

  /**
   * Fetch t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt cho dashboard
   */
  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      
      // ==================== FETCH AVAILABLE EXAMS ====================
      
      // L·∫•y danh s√°ch t·∫•t c·∫£ ƒë·ªÅ thi c√≥ s·∫µn
      const examsResponse = await fetch(createApiUrl('/api/exams'), {
        headers: getAuthHeaders()
      });
      
      const examsData = await examsResponse.json();
      
      if (!examsResponse.ok) {
        throw new Error(examsData.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·ªÅ thi');
      }

      const exams = examsData.data.exams || [];
      
      // ==================== FETCH STUDENT RESULTS ====================
      
      // L·∫•y k·∫øt qu·∫£ thi c·ªßa h·ªçc sinh
      const resultsResponse = await fetch(createApiUrl('/api/results'), {
        headers: getAuthHeaders()
      });
      
      const resultsData = await resultsResponse.json();
      const results = resultsResponse.ok ? (resultsData.data.results || []) : [];

      // ==================== CALCULATE STATISTICS ====================
      
      // T√≠nh to√°n c√°c th·ªëng k√™
      const completedExams = results.length;
      const averageScore = completedExams > 0 
        ? Math.round(results.reduce((sum, result) => sum + result.score, 0) / completedExams)
        : 0;
      
      const now = new Date();
      const upcomingExams = exams.filter(exam => 
        new Date(exam.startTime) > now && exam.status === 'scheduled'
      ).length;

      setStats({
        completedExams,
        averageScore,
        upcomingExams,
        totalExams: exams.length
      });

      // ==================== PREPARE RECENT EXAMS ====================
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu b√†i thi g·∫ßn ƒë√¢y (5 b√†i thi ƒë·∫ßu ti√™n ƒë√£ ho√†n th√†nh)
      const recentExamsData = results.slice(0, 5).map(result => ({
        id: result._id,
        title: result.exam?.title || 'B√†i thi kh√¥ng x√°c ƒë·ªãnh',
        score: result.score,
        completedAt: new Date(result.createdAt).toLocaleDateString('vi-VN'),
        status: 'completed'
      }));

      // Th√™m b√†i thi s·∫Øp t·ªõi n·∫øu c√≤n ch·ªó tr·ªëng
      const upcomingExamsData = exams
        .filter(exam => new Date(exam.startTime) > now && exam.status === 'scheduled')
        .slice(0, 5 - recentExamsData.length)
        .map(exam => ({
          id: exam._id,
          title: exam.title,
          startTime: new Date(exam.startTime).toLocaleDateString('vi-VN'),
          status: 'upcoming'
        }));

      setRecentExams([...recentExamsData, ...upcomingExamsData]);

    } catch (err) {
      console.error('Fetch dashboard data error:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  /**
   * L·∫•y m√†u s·∫Øc CSS cho badge tr·∫°ng th√°i b√†i thi
   * @param {string} status - Tr·∫°ng th√°i b√†i thi
   * @returns {string} CSS classes cho m√†u s·∫Øc
   */
  const getStatusColor = (status) => {
    switch (status) {
      case 'completed':
        return 'bg-green-100 text-green-800';
      case 'upcoming':
        return 'bg-blue-100 text-blue-800';
      case 'in-progress':
        return 'bg-yellow-100 text-yellow-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  /**
   * Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i b√†i thi sang t√™n hi·ªÉn th·ªã ti·∫øng Vi·ªát
   * @param {string} status - Tr·∫°ng th√°i b√†i thi
   * @returns {string} T√™n hi·ªÉn th·ªã ti·∫øng Vi·ªát
   */
  const getStatusText = (status) => {
    switch (status) {
      case 'completed':
        return 'Ho√†n th√†nh';
      case 'upcoming':
        return 'S·∫Øp t·ªõi';
      case 'in-progress':
        return 'ƒêang l√†m';
      default:
        return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  // Hi·ªÉn th·ªã loading n·∫øu ƒëang t·∫£i d·ªØ li·ªáu
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Loading size="lg" text="ƒêang t·∫£i d·ªØ li·ªáu..." />
      </div>
    );
  }

  // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Alert type="error" message={error} />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* ==================== HEADER ==================== */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">
            Dashboard H·ªçc sinh
          </h1>
          <p className="mt-2 text-gray-600">
            Ch√†o m·ª´ng {user?.name}, ƒë√¢y l√† t·ªïng quan h·ªçc t·∫≠p c·ªßa b·∫°n
          </p>
        </div>

        {/* ==================== STATISTICS GRID ==================== */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {/* Card b√†i thi ƒë√£ ho√†n th√†nh */}
          <Card className="bg-white">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
                  <span className="text-white text-lg">‚úÖ</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">ƒê√£ ho√†n th√†nh</p>
                <p className="text-2xl font-semibold text-gray-900">{stats.completedExams}</p>
              </div>
            </div>
          </Card>

          {/* Card ƒëi·ªÉm trung b√¨nh */}
          <Card className="bg-white">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
                  <span className="text-white text-lg">üìä</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">ƒêi·ªÉm trung b√¨nh</p>
                <p className="text-2xl font-semibold text-gray-900">{stats.averageScore}%</p>
              </div>
            </div>
          </Card>

          {/* Card b√†i thi s·∫Øp t·ªõi */}
          <Card className="bg-white">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-orange-500 rounded-md flex items-center justify-center">
                  <span className="text-white text-lg">‚è∞</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">S·∫Øp t·ªõi</p>
                <p className="text-2xl font-semibold text-gray-900">{stats.upcomingExams}</p>
              </div>
            </div>
          </Card>

          {/* Card t·ªïng s·ªë ƒë·ªÅ thi */}
          <Card className="bg-white">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-purple-500 rounded-md flex items-center justify-center">
                  <span className="text-white text-lg">üìù</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">T·ªïng ƒë·ªÅ thi</p>
                <p className="text-2xl font-semibold text-gray-900">{stats.totalExams}</p>
              </div>
            </div>
          </Card>
        </div>

        {/* ==================== QUICK ACTIONS ==================== */}
        <div className="mb-8">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            Thao t√°c nhanh
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Card l√†m b√†i thi */}
            <Link to="/student/exams" className="block group">
              <Card className="bg-white hover:shadow-lg transition-shadow duration-200">
                <div className="text-center">
                  <div className="w-12 h-12 bg-blue-500 rounded-lg flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                    <span className="text-2xl text-white">üìù</span>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    L√†m b√†i thi
                  </h3>
                  <p className="text-sm text-gray-600">
                    Xem danh s√°ch ƒë·ªÅ thi c√≥ s·∫µn
                  </p>
                </div>
              </Card>
            </Link>

            {/* Card xem k·∫øt qu·∫£ */}
            <Link to="/student/results" className="block group">
              <Card className="bg-white hover:shadow-lg transition-shadow duration-200">
                <div className="text-center">
                  <div className="w-12 h-12 bg-green-500 rounded-lg flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                    <span className="text-2xl text-white">üìä</span>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    Xem k·∫øt qu·∫£
                  </h3>
                  <p className="text-sm text-gray-600">
                    Xem k·∫øt qu·∫£ c√°c b√†i thi ƒë√£ l√†m
                  </p>
                </div>
              </Card>
            </Link>

            {/* Card h·ªì s∆° c√° nh√¢n */}
            <Link to="/student/profile" className="block group">
              <Card className="bg-white hover:shadow-lg transition-shadow duration-200">
                <div className="text-center">
                  <div className="w-12 h-12 bg-purple-500 rounded-lg flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                    <span className="text-2xl text-white">üë§</span>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    H·ªì s∆° c√° nh√¢n
                  </h3>
                  <p className="text-sm text-gray-600">
                    C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
                  </p>
                </div>
              </Card>
            </Link>
          </div>
        </div>

        {/* ==================== RECENT EXAMS ==================== */}
        <div>
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            B√†i thi g·∫ßn ƒë√¢y
          </h2>
          <Card className="bg-white">
            {/* Hi·ªÉn th·ªã khi ch∆∞a c√≥ b√†i thi */}
            {recentExams.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-gray-500">Ch∆∞a c√≥ b√†i thi n√†o</p>
              </div>
            ) : (
              /* Danh s√°ch b√†i thi g·∫ßn ƒë√¢y */
              <div className="space-y-4">
                {recentExams.map((exam) => (
                  <div key={exam.id} className="flex items-center justify-between py-3 border-b border-gray-200 last:border-b-0">
                    {/* Th√¥ng tin b√†i thi */}
                    <div className="flex-1">
                      <h3 className="text-sm font-medium text-gray-900">
                        {exam.title}
                      </h3>
                      {/* Hi·ªÉn th·ªã ƒëi·ªÉm n·∫øu ƒë√£ ho√†n th√†nh */}
                      {exam.score && (
                        <p className="text-sm text-gray-600">
                          ƒêi·ªÉm: {exam.score}/100
                        </p>
                      )}
                      {/* Hi·ªÉn th·ªã ng√†y ho√†n th√†nh */}
                      {exam.completedAt && (
                        <p className="text-xs text-gray-500">
                          Ho√†n th√†nh: {exam.completedAt}
                        </p>
                      )}
                      {/* Hi·ªÉn th·ªã ng√†y b·∫Øt ƒë·∫ßu cho b√†i thi s·∫Øp t·ªõi */}
                      {exam.startTime && (
                        <p className="text-xs text-gray-500">
                          B·∫Øt ƒë·∫ßu: {exam.startTime}
                        </p>
                      )}
                    </div>
                    {/* Tr·∫°ng th√°i b√†i thi */}
                    <div className="ml-4">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(exam.status)}`}>
                        {getStatusText(exam.status)}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </Card>
        </div>
      </div>
    </div>
  );
};

export default StudentDashboard; 