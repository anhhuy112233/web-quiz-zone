// Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import express from 'express';
import { createServer } from 'http';
import cors from 'cors';
import dotenv from 'dotenv';
import mongoose from 'mongoose';

// Load c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
dotenv.config();

console.log('üîß Starting Exam System Backend...');

try {
  // Kh·ªüi t·∫°o ·ª©ng d·ª•ng Express
  console.log('1. Creating Express app...');
  const app = express();
  const httpServer = createServer(app);
  console.log('‚úÖ Express app created');

  // Middleware CORS - cho ph√©p frontend k·∫øt n·ªëi t·ª´ domain kh√°c
  console.log('2. Setting up CORS...');
  app.use(cors({
    origin: process.env.NODE_ENV === 'production' 
      ? process.env.FRONTEND_URL || 'https://web-quiz-zone.vercel.app'
      : 'http://localhost:3000',
    credentials: true
  }));
  console.log('‚úÖ CORS configured');

  // Middleware ƒë·ªÉ parse JSON t·ª´ request body
  console.log('3. Setting up JSON middleware...');
  app.use(express.json());
  console.log('‚úÖ JSON middleware configured');



  // Route g·ªëc - Health check
  console.log('4. Setting up basic routes...');
  app.get('/', (req, res) => {
    res.json({
      message: 'Exam System API is running!',
      version: '1.0.0',
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV || 'development'
    });
  });
  console.log('‚úÖ Basic routes configured');

  // Health check endpoint
  app.get('/health', (req, res) => {
    res.json({
      status: 'OK',
      message: 'Server is healthy',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      environment: process.env.NODE_ENV || 'development',
      database: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected'
    });
  });
  console.log('‚úÖ Health check configured');

  // Import v√† ƒëƒÉng k√Ω c√°c routes
  console.log('5. Importing and registering API routes...');
  
  console.log('   - Importing auth routes...');
  const authRoutes = await import('./routes/auth.js');
  console.log('   ‚úÖ Auth routes imported');
  
  console.log('   - Importing user routes...');
  const userRoutes = await import('./routes/userRoutes.js');
  console.log('   ‚úÖ User routes imported');
  
  console.log('   - Importing exam routes...');
  const examRoutes = await import('./routes/exams.js');
  console.log('   ‚úÖ Exam routes imported');
  
  console.log('   - Importing result routes...');
  const resultRoutes = await import('./routes/results.js');
  console.log('   ‚úÖ Result routes imported');

  // ƒêƒÉng k√Ω c√°c routes
  app.use('/api/auth', authRoutes.default);
  console.log('‚úÖ Auth routes registered at /api/auth');
  
  app.use('/api/users', userRoutes.default);
  console.log('‚úÖ User routes registered at /api/users');
  
  app.use('/api/exams', examRoutes.default);
  console.log('‚úÖ Exam routes registered at /api/exams');
  
  app.use('/api/results', resultRoutes.default);
  console.log('‚úÖ Result routes registered at /api/results');

  // Import Socket.IO manager
  console.log('6. Setting up Socket.IO...');
  const SocketManager = await import('./socket.js');
  const socketManager = new SocketManager.default(httpServer);
  console.log('‚úÖ Socket.IO configured');

  // API endpoint ƒë·ªÉ l·∫•y th·ªëng k√™ h·ªá th·ªëng
  app.get('/api/stats', (req, res) => {
    const stats = socketManager.getSystemStats();
    res.json(stats);
  });
  console.log('‚úÖ Stats endpoint configured');

  // Import v√† ƒëƒÉng k√Ω error handlers
  console.log('7. Setting up error handlers...');
  const { errorHandler, notFound } = await import('./middleware/errorHandler.js');
  app.use(notFound);
  app.use(errorHandler);
  console.log('‚úÖ Error handlers configured');

  // K·∫øt n·ªëi ƒë·∫øn MongoDB database
  console.log('8. Connecting to MongoDB...');
  console.log('MongoDB URI:', process.env.MONGODB_URI ? 'Set' : 'Not set');
  
  mongoose.connect(process.env.MONGODB_URI)
    .then(() => {
      console.log('‚úÖ Connected to MongoDB');
      
      // Kh·ªüi ƒë·ªông server sau khi k·∫øt n·ªëi database th√†nh c√¥ng
      const PORT = process.env.PORT || 5000;
      console.log(`9. Starting server on port ${PORT}...`);
      
      httpServer.listen(PORT, () => {
        console.log(`‚úÖ Server is running on port ${PORT}`);
        console.log('‚úÖ Socket.IO server is ready for real-time connections');
        console.log('üéâ Application started successfully!');
        console.log(`üåê API Base URL: http://localhost:${PORT}`);
        console.log(`üîê Auth Endpoint: http://localhost:${PORT}/api/auth/login`);
      });
    })
    .catch((error) => {
      console.error('‚ùå MongoDB connection error:', error);
      process.exit(1);
    });

} catch (error) {
  console.error('‚ùå Error during server startup:', error.message);
  console.error('Stack:', error.stack);
  process.exit(1);
} 